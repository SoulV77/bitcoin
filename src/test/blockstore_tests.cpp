#include <boost/test/unit_test.hpp>

#include "headers.h"
#include "main.h"

using namespace std;

uint256 hashTxCommittedToMemoryPool;
bool fCommitted;

void TestHandleCommitTransactionToMemoryPool(const CTransaction& tx)
{
    hashTxCommittedToMemoryPool = tx.GetHash();
    fCommitted = true;
}

BOOST_AUTO_TEST_SUITE(blockstore_tests)

// Much of these test cases shamelessly stolen from transaction_tests.cpp
BOOST_AUTO_TEST_CASE(cblockstore_emittransaction)
{
    // Random real transaction (e2769b09e784f32f62ef849763d4f45b98e07ba658647343b915ff832b110436)
    unsigned char ch[] = {0x01, 0x00, 0x00, 0x00, 0x01, 0x6b, 0xff, 0x7f, 0xcd, 0x4f, 0x85, 0x65, 0xef, 0x40, 0x6d, 0xd5, 0xd6, 0x3d, 0x4f, 0xf9, 0x4f, 0x31, 0x8f, 0xe8, 0x20, 0x27, 0xfd, 0x4d, 0xc4, 0x51, 0xb0, 0x44, 0x74, 0x01, 0x9f, 0x74, 0xb4, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x49, 0x30, 0x46, 0x02, 0x21, 0x00, 0xda, 0x0d, 0xc6, 0xae, 0xce, 0xfe, 0x1e, 0x06, 0xef, 0xdf, 0x05, 0x77, 0x37, 0x57, 0xde, 0xb1, 0x68, 0x82, 0x09, 0x30, 0xe3, 0xb0, 0xd0, 0x3f, 0x46, 0xf5, 0xfc, 0xf1, 0x50, 0xbf, 0x99, 0x0c, 0x02, 0x21, 0x00, 0xd2, 0x5b, 0x5c, 0x87, 0x04, 0x00, 0x76, 0xe4, 0xf2, 0x53, 0xf8, 0x26, 0x2e, 0x76, 0x3e, 0x2d, 0xd5, 0x1e, 0x7f, 0xf0, 0xbe, 0x15, 0x77, 0x27, 0xc4, 0xbc, 0x42, 0x80, 0x7f, 0x17, 0xbd, 0x39, 0x01, 0x41, 0x04, 0xe6, 0xc2, 0x6e, 0xf6, 0x7d, 0xc6, 0x10, 0xd2, 0xcd, 0x19, 0x24, 0x84, 0x78, 0x9a, 0x6c, 0xf9, 0xae, 0xa9, 0x93, 0x0b, 0x94, 0x4b, 0x7e, 0x2d, 0xb5, 0x34, 0x2b, 0x9d, 0x9e, 0x5b, 0x9f, 0xf7, 0x9a, 0xff, 0x9a, 0x2e, 0xe1, 0x97, 0x8d, 0xd7, 0xfd, 0x01, 0xdf, 0xc5, 0x22, 0xee, 0x02, 0x28, 0x3d, 0x3b, 0x06, 0xa9, 0xd0, 0x3a, 0xcf, 0x80, 0x96, 0x96, 0x8d, 0x7d, 0xbb, 0x0f, 0x91, 0x78, 0xff, 0xff, 0xff, 0xff, 0x02, 0x8b, 0xa7, 0x94, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0xba, 0xde, 0xec, 0xfd, 0xef, 0x05, 0x07, 0x24, 0x7f, 0xc8, 0xf7, 0x42, 0x41, 0xd7, 0x3b, 0xc0, 0x39, 0x97, 0x2d, 0x7b, 0x88, 0xac, 0x40, 0x94, 0xa8, 0x02, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0xc1, 0x09, 0x32, 0x48, 0x3f, 0xec, 0x93, 0xed, 0x51, 0xf5, 0xfe, 0x95, 0xe7, 0x25, 0x59, 0xf2, 0xcc, 0x70, 0x43, 0xf9, 0x88, 0xac, 0x00, 0x00, 0x00, 0x00, 0x00};
    vector<unsigned char> vch(ch, ch + sizeof(ch) -1);
    CDataStream stream(vch);
    CTransaction tx;
    stream >> tx;

    pblockstore->RegisterCommitTransactionToMemoryPool(TestHandleCommitTransactionToMemoryPool);

    fCommitted = false;
    BOOST_CHECK_MESSAGE(!pblockstore->EmitTransaction(tx), "Transaction without inputs in memory pool shouldnt be accepted.");
    Sleep(200); // Might take a sec before ProcessCallbacks gets around to calling back
    BOOST_CHECK_MESSAGE(!fCommitted, "CommitToMemoryPool callbacks should not be made on a transaction that is missing inputs.");

    uint256 hashTx = tx.GetHash();
    fCommitted = false;
    BOOST_CHECK_MESSAGE(pblockstore->EmitTransaction(tx, false), "Simple deserialized transaction should be valid.");
    Sleep(200); // Might take a sec before ProcessCallbacks gets around to calling back
    BOOST_CHECK_MESSAGE(fCommitted, "CommitToMemoryPool callbacks should complete within 200 msec.");
    BOOST_CHECK_MESSAGE(hashTx == hashTxCommittedToMemoryPool, "Hash of committed transaction should be equal to the emitted one.");

    // Spends e2769b09e784f32f62ef849763d4f45b98e07ba658647343b915ff832b110436[0] (bbf5cd27127f19dc359bdabb3a4ea2391e14062c748235ff81b98b43315756ac)
    unsigned char ch2[] = {0x01, 0x00, 0x00, 0x00, 0x01, 0x36, 0x04, 0x11, 0x2b, 0x83, 0xff, 0x15, 0xb9, 0x43, 0x73, 0x64, 0x58, 0xa6, 0x7b, 0xe0, 0x98, 0x5b, 0xf4, 0xd4, 0x63, 0x97, 0x84, 0xef, 0x62, 0x2f, 0xf3, 0x84, 0xe7, 0x09, 0x9b, 0x76, 0xe2, 0x00, 0x00, 0x00, 0x00, 0x8a, 0x47, 0x30, 0x44, 0x02, 0x20, 0x6b, 0x85, 0x77, 0x09, 0x8e, 0x34, 0x68, 0x84, 0xe6, 0x3b, 0xe3, 0x8e, 0xcd, 0x24, 0xaf, 0x53, 0x5a, 0x4d, 0x7c, 0x97, 0x32, 0x64, 0x7a, 0x9a, 0xad, 0x09, 0x47, 0x2e, 0xde, 0x2f, 0x51, 0x7b, 0x02, 0x20, 0x15, 0x51, 0xcf, 0x53, 0xde, 0x83, 0xc5, 0xcc, 0x3f, 0x6a, 0x5c, 0x4a, 0xdc, 0x4d, 0xf9, 0x52, 0x06, 0xff, 0xf8, 0x88, 0x78, 0x4c, 0xaf, 0xd4, 0x1e, 0x15, 0x5b, 0xfb, 0xee, 0x8b, 0x99, 0xac, 0x01, 0x41, 0x04, 0x38, 0x2b, 0x53, 0x80, 0x8e, 0x0f, 0xda, 0xdc, 0x56, 0x0b, 0x28, 0x40, 0xa3, 0xb6, 0xb0, 0xbe, 0x0b, 0xcc, 0x50, 0x22, 0x62, 0xe9, 0xc6, 0x96, 0xef, 0x0f, 0xbe, 0xd2, 0x1a, 0xc8, 0xc5, 0x6d, 0x7a, 0xe5, 0x60, 0x5e, 0x3c, 0xea, 0x26, 0xa5, 0x93, 0xb4, 0x61, 0xfd, 0x64, 0xf6, 0xba, 0x5c, 0xf2, 0xce, 0xac, 0xd1, 0x81, 0xd3, 0x60, 0xf2, 0x3d, 0x8b, 0x8b, 0xad, 0x84, 0xd8, 0xbb, 0x73, 0xff, 0xff, 0xff, 0xff, 0x02, 0x6e, 0x7e, 0xaa, 0x07, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0xb6, 0x00, 0x21, 0x76, 0xec, 0x7b, 0x40, 0x7d, 0xd6, 0x7c, 0x26, 0x5d, 0x8a, 0xcd, 0x4e, 0x4b, 0xf1, 0x09, 0x62, 0xc3, 0x88, 0xac, 0xcd, 0x65, 0xe9, 0x06, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0x5b, 0xbf, 0x91, 0x3a, 0x24, 0xa4, 0xc5, 0xc5, 0x2f, 0x1d, 0x3a, 0x68, 0x33, 0x25, 0x63, 0xdb, 0xd3, 0x00, 0x81, 0x04, 0x88, 0xac, 0x00, 0x00, 0x00, 0x00, 0x00};
    vch = vector<unsigned char> (ch2, ch2 + sizeof(ch2) -1);
    stream = CDataStream(vch);
    stream >> tx;

    hashTx = tx.GetHash();
    fCommitted = false;
    BOOST_CHECK_MESSAGE(pblockstore->EmitTransaction(tx), "Spending transaction should be valid.");
    Sleep(200); // Might take a sec before ProcessCallbacks gets around to calling back
    BOOST_CHECK_MESSAGE(fCommitted, "CommitToMemoryPool callbacks should complete within 200 msec.");
    BOOST_CHECK_MESSAGE(hashTx == hashTxCommittedToMemoryPool, "Hash of committed transaction should be equal to the emitted one.");

    fCommitted = false;
    BOOST_CHECK_MESSAGE(!pblockstore->EmitTransaction(tx), "Double emit shouldn't be valid.");
    Sleep(200); // Might take a sec before ProcessCallbacks gets around to calling back
    BOOST_CHECK_MESSAGE(!fCommitted, "CommitToMemoryPool callbacks should not be made on a double emit.");
}

BOOST_AUTO_TEST_SUITE_END()
